name: E2E Tests

on: 
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  test-docker:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    # 1. NPM CACHE
    - name: Cache Node Modules
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    # 2. RESTORE PREVIOUS ALLURE RESULTS (history for trend reports)
    - name: Download previous Allure results
      uses: actions/download-artifact@v4
      with:
        name: allure-results
        path: reports/allure-results
      continue-on-error: true

    # 3. Set up Docker Compose
    - name: Set up Docker Compose
      uses: ndeloof/install-compose-action@v0.0.1

    # 4. BUILD AND RUN TESTS
    - name: Build and run tests in Docker
      run: docker-compose up --build --exit-code-from test

    # 5. FIX Permissions + Convert Cucumber JSON
    - name: Fix permissions and Convert Cucumber JSON
      if: always()
      run: |
        sudo mkdir -p reports/allure-results reports/allure-report
        sudo chmod -R 777 reports
        sudo chown -R $USER:$USER reports

        if [ -f reports/cucumber.json ]; then
          npm ci
          mkdir -p reports/allure-results
          node tests/support/generate-allure.js
          echo "✅ Conversion successful."
        else
          echo "⚠️ cucumber.json not found. Proceeding without conversion."
        fi

    # 6. Generate Allure Report
    - name: Generate Allure Report and Prepare for Deployment
      if: always()
      run: |
        # Install Allure CLI
        curl -o allure-2.24.1.tgz -OLs https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.24.1/allure-commandline-2.24.1.tgz
        sudo tar -zxvf allure-2.24.1.tgz -C /opt/
        sudo ln -s /opt/allure-2.24.1/bin/allure /usr/bin/allure

        # Install rsync
        sudo apt-get update && sudo apt-get install -y rsync || true

        # Generate report (with restored history)
        allure generate reports/allure-results --clean -o reports/allure-report

        # Copy new history for artifact upload
        NEW_HISTORY_SOURCE=reports/allure-report/history
        NEW_HISTORY_DEST=reports/allure-results/history
        mkdir -p ${NEW_HISTORY_DEST}
        if [ -d ${NEW_HISTORY_SOURCE} ]; then
          rsync -a ${NEW_HISTORY_SOURCE}/ ${NEW_HISTORY_DEST}/
          echo "✅ Copied new history for next run."
        else
          echo "⚠️ No new history generated."
        fi

        # Prepare deployment folder
        mkdir -p reports/allure-report-with-header
        rsync -a reports/allure-report/ reports/allure-report-with-header/

        # Inject favicon + headers
        curl -s https://raw.githubusercontent.com/microsoft/playwright/main/assets/playwright-logo.svg > reports/allure-report-with-header/favicon.svg
        CACHE_BUSTING_TAGS='<meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate"><meta http-equiv="Pragma" content="no-cache"><meta http-equiv="Expires" content="0">'
        sed -i "s|<head>|<head>$CACHE_BUSTING_TAGS<link rel=\"icon\" type=\"image/svg+xml\" href=\"favicon.svg\"><title>Playwright E2E Test Report</title>|" reports/allure-report-with-header/index.html
        HEADER_CONTENT=$(cat header.html | tr -d '\n')
        METADATA_CONTENT=$(cat metadata.html | tr -d '\n')
        CUSTOM_HEADER_CONTENT="$HEADER_CONTENT$METADATA_CONTENT"
        ESCAPED_CONTENT=$(echo "$CUSTOM_HEADER_CONTENT" | sed 's/[\&/]/\\&/g')
        sed -i "/<body>/a\\
        $ESCAPED_CONTENT" reports/allure-report-with-header/index.html

    # 7. Deploy to GitHub Pages
    - name: Setup Pages
      if: always()
      uses: actions/configure-pages@v4

    - name: Upload Report to Pages
      if: always()
      uses: actions/upload-pages-artifact@v3
      with:
        path: reports/allure-report-with-header
        retention-days: 90

    - name: Deploy to GitHub Pages
      if: always()
      id: deployment
      uses: actions/deploy-pages@v4

    # 8. UPLOAD ALLURE RESULTS for next run (trend report)
    - name: Upload Allure results artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: allure-results
        path: reports/allure-results
        retention-days: 7

    # 9. Cleanup Docker Cache
    - name: Delete Docker Build Cache
      if: always()
      run: docker builder prune -f
